package com.cummins.project734.luceneentity;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.Date;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.FieldType;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;



public class IndexBuilder {
	
	
		public void buildIndex(String fileName) throws IOException{
			   //fileDir is the directory that contains the text files to be indexed
			   File   fileDir  = new File(fileName);
			   String delimiter = "&";
			   

			   //indexDir is the directory that hosts Lucene's index files
			   Directory indexDir = null;
			try {
				indexDir = FSDirectory.open(new File( "C:\\luceneIndex" ));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			   //File  indexDir = new File("C:\\luceneIndex");
			   Analyzer luceneAnalyzer = new StandardAnalyzer(Version.LUCENE_40);
			   IndexWriterConfig conf = new IndexWriterConfig(null, luceneAnalyzer).setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
			   IndexWriter indexWriter = new IndexWriter(indexDir,conf);
			   File[] textFiles  = fileDir.listFiles();
			   System.out.println("Files: "+fileDir.getName());
			   System.out.println("Files: "+fileDir.getName()+ " length: "+fileDir.exists());
			   long startTime = new Date().getTime();

			   //Add documents to the index
			   for(int i = 0; i < textFiles.length; i++){
				   System.out.println("Loop: "+i);
			     if(textFiles[i].isFile() && textFiles[i].getName().endsWith(".txt")){
			       System.out.println("File " + textFiles[i].getCanonicalPath() 
			              + " is being indexed");
			       FileReader textReader = new FileReader(textFiles[i]);
			       BufferedReader br = new BufferedReader(textReader);
			       String line = "";
			       while(br!=null){
			    	   while(!br.equals(delimiter)){
			    		   line = br.readLine();
			    		   System.out.println("Record: "+line);
			    	   }
			    	   Document document = new Document();
				       FieldType ft  = new FieldType();
				       
				       ft.setIndexed(true);
				       //ft.tokenized();
				       ft.setTokenized(true);
				     
				       document.add(new Field("content", line, ft));
				       document.add(new StringField("path",textFiles[i].getCanonicalPath(), Field.Store.YES));
				       indexWriter.addDocument(document);
			       }
			       
			     }
			   }

			  // indexWriter.optimize();
			   indexWriter.close();
			   long endTime = new Date().getTime();

			   System.out.println("It took " + (endTime - startTime) 
			              + " milliseconds to create an index for the files in the directory "
			              + fileDir.getPath());
			  }
}
