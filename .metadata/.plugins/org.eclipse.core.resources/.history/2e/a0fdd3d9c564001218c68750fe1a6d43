package com.cummins.project734.luceneentity;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

import com.cummins.project734.entity.AnalysisData;
import com.cummins.project734.entity.ErrorInformation;
import com.cummins.project734.entity.SearchResult;

public class DataAnalyzer {

	public AnalysisData analyzeData(File indexDir, String searchQuery, SearchResult sResult) throws Exception {

		double percentage = 0.00;
		List<ErrorInformation> errorInfoList = new ArrayList<ErrorInformation>();
		AnalysisData analysis = new AnalysisData();
		SearchIndex errorSearcher = new SearchIndex();


		String queryStr = "error*";

		Directory directory = FSDirectory.open(indexDir);
		IndexReader reader = IndexReader.open(directory);
		//Calculate percentage
		double numDocs = reader.numDocs();
		double frequency = sResult.getFrequency();
		percentage = (double)((frequency/numDocs)*100);

		System.out.println("Frequency: "+sResult.getFrequency()+" NumDocs: "+numDocs+" Percentage: "+percentage);
		analysis.setPercentage((float)percentage);
		analysis.setTotalNoOfRecords((int) numDocs);
		IndexSearcher searcher = new IndexSearcher(reader);
		//Get error information
		errorInfoList = getErrorInformation(errorSearcher,indexDir,queryStr);
		analysis.setErrorInfo(errorInfoList);
		return analysis;
	}


	public List<ErrorInformation> getErrorInformation(SearchIndex errorSearcher, File indexDir, String queryStr) throws Exception{

		int j=0;
		int flag=0;
		boolean checkIfExists = false;
		String checkVal = "";

		SearchResult errorResult = new SearchResult();
		List<ErrorInformation> errorInfoList = new ArrayList<ErrorInformation>();
		List<String> errorRecordList = new ArrayList<String>();
		errorResult = errorSearcher.searchIndex(indexDir, queryStr, 1000);
		System.out.println("\nErrorResult details:");
		System.out.println("ErrorResult frequency: "+errorResult.getFrequency());
		System.out.println("ErrorResult records: "+errorResult.getRecords());

		errorRecordList = errorResult.getRecords();
		System.out.println("errorRecord list: "+errorRecordList);
		Iterator errorIterator = errorRecordList.iterator();
		while(errorIterator.hasNext()){
			String [] splitErrorRecord = errorIterator.next().toString().split(" ");
			System.out.println("\nSplit String: "+splitErrorRecord[5]+"  "+splitErrorRecord.length);
			for(int i=0;i<splitErrorRecord.length;i++){
				System.out.println("splitErrorRecord[i]+ "+splitErrorRecord[i]);
				if(splitErrorRecord[i].toString().trim().equalsIgnoreCase("[error".toString().trim())){
					j=i+1;
					if(j<splitErrorRecord.length){
						System.out.println("j: "+j);
						flag=1;
						ErrorInformation eInfo = new ErrorInformation();
						System.out.println("splitErrorRecord[i]: "+splitErrorRecord[i]+" splitErrorRecord[j]:"+splitErrorRecord[j]);
						if((checkIfExists=checkExistence(splitErrorRecord[j],errorInfoList))){
							Iterator it = errorInfoList.iterator();
							while(it.hasNext()){
								eInfo = (ErrorInformation) it.next();
								if((checkVal=eInfo.getErrorType()).equalsIgnoreCase(splitErrorRecord[j])){
									
									System.out.println("Num: "+eInfo.getNumber()+" checkVal:"+checkVal);
									eInfo.setNumber(eInfo.getNumber()+1);
								}
							}
						}
						else{
							eInfo.setErrorType(splitErrorRecord[j]);
							eInfo.setNumber(eInfo.getNumber()+1);
							errorInfoList.add(eInfo);
							System.out.println("\nErrorInfoList: "+errorInfoList);
						}
						j=0;
					}
				}
				flag=1;
			}
		}
		System.out.println("\n\nFinal error list: ");
		ErrorInformation displayList = new ErrorInformation();
		Iterator lIterator = errorInfoList.iterator();
		while(lIterator.hasNext()){
			displayList = (ErrorInformation) lIterator.next();
			System.out.println("\nType: "+displayList.getErrorType()+" Number: "+displayList.getNumber());
		}
		return errorInfoList;
	}


	private boolean checkExistence(String string, List<ErrorInformation> errorInfoList) {
		// TODO Auto-generated method stub
		Iterator listIterator = errorInfoList.iterator();
		ErrorInformation eInfo = new ErrorInformation();
		System.out.println("\nIn checkExistence function");
		while(listIterator.hasNext()){
			String type = (((ErrorInformation) listIterator.next()).getErrorType()).toString();
			if(type.equalsIgnoreCase(string)){
				System.out.println("True.");
				return true;
			}
		}

		return false;
	}

}
